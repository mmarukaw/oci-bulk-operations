import oci
from modules.common import *

client = oci.core.ComputeClient

def stop_compute_instances(config, signer, compartments):
    target = TargetResources()
    target.resource_name   = 'compute instances'
    target.action          = 'STOP'
    target.target_state    = 'STOPPED'
    target.state_in_action = 'STOPPING'
    target.list_methods    = [client(config, signer=signer).list_instances]
    target.dispname_keys   = ['display_name']
    target.parentid_keys   = [None]
    target.get_method      = client(config, signer=signer).get_instance
    target.action_method   = client(config, signer=signer).instance_action
    target.action_args     = {'action' : 'STOP'}

    def filter_logic(resource):
        if (resource.lifecycle_state == 'RUNNING') and (is_nightlystop_tagged):
            return True
        else:
            return False

    target.filter_logic = filter_logic

    target_resources = target.list(compartments)
    print(type(target_resources))
    target.action(target_resources)
    target.wait_completion(target_resources)

def purge_compute_instances(config, signer, compartments):
    resource_name   = 'compute instances'
    action          = 'TERMINATE'
    target_state    = 'TERMINATED'
    state_in_action = 'TERMINATING'
    list_methods    = [client(config, signer=signer).list_instances]
    dispname_keys   = ['display_name']
    parentid_keys   = [None]
    get_method      = client(config, signer=signer).get_instance
    action_method   = client(config, signer=signer).terminate_instance
    action_args     = {}

    def filter_logic(resource):
        if (resource.lifecycle_state == 'RUNNING') and (is_nightlystop_tagged):
            return True
        else:
            return False

    filter_logic = filter_logic
    target_resources = list_target_resources(compartments, resource_name, list_methods, dispname_keys, filter_logic, parentid_keys)
    commit_actions(resource_name, target_resources, action_method, action, **action_args)
    wait_completion(resource_name, target_resources, get_method, state_in_action, target_state)



    resource_name  = 'compute instances'
    print("\nListing all {}... (* is marked for action)".format(resource_name))
    target_resources = []
    for compartment in compartments:
        resources = list_resources(client(config, signer=signer).list_instances, compartment_id=compartment.id)
        for resource in resources:
            if (resource.lifecycle_state not in ['TERMINATING', 'TERMINATED']):
                print("    * {} ({}) in {}".format(resource.display_name, resource.lifecycle_state, compartment.name))
                target_resources.append(resource)
            else:
                print("      {} ({}) in {}".format(resource.display_name, resource.lifecycle_state, compartment.name))

    commit_actions(resource_name, target_resources, client(config, signer=signer).terminate_instance, 'TERMINATE')
    wait_actions_completion(resource_name, target_resources, client(config, signer=signer).get_instance, 'TERMINATING', 'TERMINATED')

